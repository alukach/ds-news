{"version":3,"sources":["store/utils.ts","store/auth/auth.actions.ts","store/auth/auth.reducer.tsx","store/query/query.actions.ts","store/query/query.reducer.tsx","store/auth/auth.epics.ts","store/query/query.selectors.ts","store/query/query.epics.ts","store/query/utils.ts","store/root-epic.tsx","services/index.ts","services/Github.ts","config.ts","store/root-reducer.tsx","store/store.tsx","components/Nav.tsx","views/Login.tsx","views/Feed/Issue.tsx","views/Feed/Sidebar.tsx","views/Feed/NavFilter.tsx","views/Feed/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","fetchToken","createAsyncAction","logout","createAction","tokenReducer","createReducer","handleType","getType","success","state","action","payload","combineReducers","token","setQuery","setSearchTerm","setSort","addRepo","rmRepo","executeSearch","startPolling","stopPolling","setPollingTimer","initialState","query","search","repo","map","sort","results","polling","active","count","interval","queryReducer","handleAction","includes","concat","filter","name","resultsReducer","request","status","data","error","undefined","asOf","moment","format","failure","pollingReducer","epics","action$","state$","ajax","config","pipe","isActionOf","mergeMap","post","api","auth","code","Accept","response","access_token","catchError","message","of","mapTo","push","getQueryString","createSelector","Object","entries","value","Array","isArray","length","flatMap","key","v","join","queryChanged","prevState","curState","JSON","stringify","pairwise","debounceTime","searchDebounceMs","replace","router","location","encodeURIComponent","ofType","LOCATION_CHANGE","pathname","paths","feed","isFirstRendering","url","slice","decodeURIComponent","split","reduce","acc","Boolean","merge","some","check","github","switchMap","from","switchMapTo","timer","val","takeWhile","repeat","takeUntil","REHYDRATE","mergeMapTo","rootEpic","combineEpics","authEpics","queryEpics","services","graphql","searchQuery","headers","authorization","apiBase","process","domain","history","clientId","login","createBrowserHistory","epicMiddleware","createEpicMiddleware","dependencies","middlewares","createRouterMiddleware","enhancer","applyMiddleware","persistConfig","storage","whitelist","persistedReducer","persistReducer","connectRouter","store","createStore","persistor","persistStore","run","connect","isLoggedIn","dispatch","bindActionCreators","dispatchLogout","id","className","src","alt","href","onClick","dispatchfetchToken","qs","parse","authToken","useEffect","to","emojis","CONFUSED","EYES","HEART","HOORAY","LAUGH","ROCKET","THUMBS_DOWN","THUMBS_UP","title","number","author","createdAt","closedAt","repository","reactions","comments","owner","fromNow","edges","edge","node","content","r1","reaction","emoji","size","tooltip","totalCount","dispatchAddRepo","dispatchRmRepo","useState","repoName","setRepoName","toLowerCase","i","onSubmit","e","preventDefault","type","placeholder","onChange","currentTarget","searchTerm","sortOptions","created","updated","interactions","style","flexGrow","UncontrolledDropdown","DropdownToggle","tag","DropdownMenu","DropdownItem","dispatchSetSearchTerm","dispatchSetSort","NavFilter","nodes","Issue","Sidebar","App","loading","basename","path","component","Login","Feed","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.867aa597.chunk.js","sourcesContent":["import { compose } from \"redux\";\n\nexport const composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n","import { createAction, createAsyncAction } from \"typesafe-actions\";\n\nexport const fetchToken = createAsyncAction(\n  \"AUTH/FETCH_TOKEN_REQUEST\",\n  \"AUTH/FETCH_TOKEN_SUCCESS\",\n  \"AUTH/FETCH_TOKEN_FAILURE\"\n)<string, string, string>();\n\nexport const logout = createAction(\"AUTH/LOGOUT\")();\n","import { combineReducers } from \"redux\";\nimport { createReducer, getType } from \"typesafe-actions\";\nimport { fetchToken, logout } from \"./auth.actions\";\n\nexport type AuthState = Readonly<{\n  token: string;\n}>;\nconst initialState: AuthState = {\n  token: \"\"\n};\n\nconst tokenReducer = createReducer(initialState.token)\n  .handleType(getType(fetchToken.success), (state, action) => action.payload)\n  .handleType(getType(logout), state => \"\");\n\n// TODO: Handle fetchToken.failure, fetchToken.start\n\nexport default combineReducers({\n  token: tokenReducer\n});\n","import { createAction, createAsyncAction } from \"typesafe-actions\";\nimport { IssuesSearchResult } from \"../../services/Github\";\nimport { QueryState } from \"./query.reducer\";\n\nexport const setQuery = createAction(\"QUERY/SET\")<QueryState[\"query\"]>();\nexport const setSearchTerm = createAction(\"QUERY/SET_SEARCH_TERM\")<string>();\nexport const setSort = createAction(\"QUERY/SET_SORT\")<string>();\nexport const addRepo = createAction(\"QUERY/REPO_ADD\")<string>();\nexport const rmRepo = createAction(\"QUERY/REPO_RM\")<string>();\n\nexport const executeSearch = createAsyncAction(\n  \"QUERY/SEARCH_REQUEST\",\n  \"QUERY/SEARCH_SUCCESS\",\n  \"QUERY/SEARCH_FAILURE\"\n)<string, IssuesSearchResult, string>();\n\nexport const startPolling = createAction(\"QUERY/START_POLLING\")();\nexport const stopPolling = createAction(\"QUERY/STOP_POLLING\")();\nexport const setPollingTimer = createAction(\"QUERY/SET_POLLING_TIMER\")<\n  number\n>();\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"typesafe-actions\";\nimport {\n  setSearchTerm,\n  executeSearch,\n  startPolling,\n  stopPolling,\n  setPollingTimer,\n  rmRepo,\n  addRepo,\n  setSort,\n  setQuery\n} from \"./query.actions\";\nimport { Async } from \"../types\";\nimport { IssuesSearchResult } from \"../../services/Github\";\nimport moment from \"moment\";\n\n// TODO: Clear query results on logout\nexport type QueryState = Readonly<{\n  query: {\n    search: string;\n    repo: string[];\n    sort: string;\n  };\n  results: null | (Async<IssuesSearchResult, string> & { asOf: string });\n  polling: {\n    active: boolean;\n    count: null | number;\n    interval: number;\n  };\n}>;\nconst initialState: QueryState = {\n  query: {\n    search: \"\",\n    repo: [\n      \"now\",\n      \"how\",\n      \"ds-business\",\n      \"ds-team\",\n      \"operations\",\n      \"ds-realwork\",\n      \"labs\"\n    ].map(repo => `developmentseed/${repo}`),\n    sort: \"created\"\n  },\n  results: null,\n  polling: {\n    active: true,\n    count: null,\n    interval: 5 * 60\n  }\n};\n\nconst queryReducer = createReducer(initialState.query)\n  .handleAction(setSearchTerm, (state, { payload }) => ({\n    ...state,\n    search: payload\n  }))\n  .handleAction(setQuery, (state, { payload }) => ({\n    ...state,\n    ...payload\n  }))\n  .handleAction(setSort, (state, { payload }) => ({\n    ...state,\n    sort: payload\n  }))\n  .handleAction(addRepo, ({ repo, ...state }, { payload }) => ({\n    ...state,\n    repo: repo.includes(payload) ? repo : repo.concat(payload)\n  }))\n  .handleAction(rmRepo, ({ repo, ...state }, { payload }) => ({\n    ...state,\n    repo: repo.filter(name => name !== payload)\n  }));\n\nconst resultsReducer = createReducer(initialState.results)\n  .handleAction(executeSearch.request, (state, action) => ({\n    status: \"FETCHING\",\n    data: state?.data,\n    error: undefined,\n    asOf: moment().format(\"LLL\")\n  }))\n  .handleAction(executeSearch.success, (state, { payload }) => ({\n    status: \"SUCCESS\",\n    data: payload,\n    error: undefined,\n    asOf: moment().format(\"LLL\")\n  }))\n  .handleAction(executeSearch.failure, (state, { payload }) => ({\n    status: \"FAILED\",\n    data: undefined,\n    error: payload,\n    asOf: moment().format(\"LLL\")\n  }));\n\nconst pollingReducer = createReducer(initialState.polling)\n  .handleAction(startPolling, state => ({\n    ...state,\n    active: true\n  }))\n  .handleAction(stopPolling, state => ({\n    ...state,\n    count: null,\n    active: false\n  }))\n  .handleAction(setPollingTimer, (state, { payload }) => ({\n    ...state,\n    count: payload\n  }));\n\nexport default combineReducers({\n  query: queryReducer,\n  results: resultsReducer,\n  polling: pollingReducer\n});\n","import { push } from \"connected-react-router\";\nimport { of } from \"rxjs\";\nimport { catchError, filter, map, mapTo, mergeMap } from \"rxjs/operators\"; // tslint:disable-line\nimport { isActionOf } from \"typesafe-actions\";\nimport { RootEpic } from \"../types\";\nimport { fetchToken } from \"./auth.actions\";\n\nconst fetchGithubToken: RootEpic = (action$, state$, { ajax, config }) =>\n  action$.pipe(\n    filter(isActionOf(fetchToken.request)),\n    mergeMap(({ payload }) =>\n      ajax\n        .post(\n          config.api.auth,\n          {\n            code: payload\n          },\n          {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n          }\n        )\n        .pipe(\n          map(response => response.response),\n          map(({ access_token }: { access_token: string }) =>\n            fetchToken.success(access_token)\n          ),\n          catchError(message => of(fetchToken.failure(message)))\n        )\n    )\n  );\n\nconst redirectHomeAfterLogin: RootEpic = action$ =>\n  action$.pipe(filter(isActionOf(fetchToken.success)), mapTo(push(\"/\")));\n\nexport const epics = [fetchGithubToken, redirectHomeAfterLogin];\n","import { createSelector } from \"reselect\";\nimport { QueryState } from \"./query.reducer\";\n\nconst getQuery = (query: QueryState[\"query\"]) => query;\n\n/**\n * Convert the query object into a Github compliant query string\n */\nexport const getQueryString = createSelector([getQuery], query =>\n  Object.entries(query)\n    // Ignore empty queries\n    .filter(([_, value]) => (Array.isArray(value) ? value.length : value))\n    // Break array values into array of key + value\n    .flatMap(([key, value]) =>\n      Array.isArray(value)\n        ? (value as Array<number | string>).map(v => [key, v])\n        : [[key, value]]\n    )\n    // Format as key:value\n    .map(([key, value]) => (key === \"search\" ? value : `${key}:${value}`))\n    .join(\" \")\n);\n","import { LOCATION_CHANGE, replace } from \"connected-react-router\";\nimport { ofType } from \"redux-observable\";\nimport { REHYDRATE } from \"redux-persist\";\nimport { concat, from, merge, of, timer } from \"rxjs\";\nimport {\n  catchError,\n  debounceTime,\n  filter,\n  map,\n  mergeMapTo,\n  pairwise,\n  repeat,\n  switchMap,\n  switchMapTo,\n  takeUntil,\n  takeWhile\n} from \"rxjs/operators\";\nimport { isActionOf } from \"typesafe-actions\";\nimport { fetchToken } from \"../auth/auth.actions\";\nimport { RootAction, RootEpic, RootState } from \"../types\";\nimport {\n  executeSearch,\n  setPollingTimer,\n  setQuery,\n  startPolling,\n  stopPolling\n} from \"./query.actions\";\nimport { getQueryString } from \"./query.selectors\";\nimport { getQueryFromString } from \"./utils\";\n\nconst queryChanged = ([prevState, curState]: [RootState, RootState]) =>\n  JSON.stringify(prevState.query.query) !==\n  JSON.stringify(curState.query.query);\n\n/**\n * When our search parameters update, update URL\n */\nconst setUrl: RootEpic = (action$, state$, { config }) =>\n  state$.pipe(\n    pairwise(),\n    filter(queryChanged),\n    debounceTime(config.searchDebounceMs), // Without debounce, the app can feel sluggish when each keystroke updates the URL\n    map(([_, curState]) => curState.query.query),\n    map(query =>\n      replace({\n        ...state$.value.router.location,\n        search: `q=${encodeURIComponent(getQueryString(query))}`\n      })\n    )\n  );\n\n/**\n * When we load application, rehydrate query from URL\n */\nconst loadFromUrl: RootEpic = (action$, state$, { config }) =>\n  action$.pipe(\n    ofType(LOCATION_CHANGE),\n    filter(({ payload }) => payload.location.pathname === config.paths.feed),\n    filter(({ payload }) => payload.isFirstRendering),\n    map(() =>\n      setQuery(\n        getQueryFromString(state$.value.router.location.search.slice(3)) // Slice to ignore '?q='\n      )\n    )\n  );\n\n/**\n * Trigger a search to Github in response to particular events\n */\nconst triggerSearchEpic: RootEpic = (action$, state$, { config }) =>\n  // Trigger search on...\n  merge(\n    // ... actions where ...\n    action$.pipe(\n      filter((action: RootAction) =>\n        [\n          // ... login occurred\n          isActionOf(fetchToken.success),\n          // ... poll counter hits 0\n          (action: RootAction) =>\n            isActionOf(setPollingTimer)(action) && action.payload === 0\n        ].some(check => check(action))\n      )\n    ),\n\n    // ... states where ....\n    state$.pipe(\n      // ...compared to last state ...\n      pairwise(),\n      // ... query has changed\n      filter(queryChanged)\n    )\n  ).pipe(\n    // Throttle search executions\n    debounceTime(config.searchDebounceMs),\n    // Only if user has an access token\n    filter(() => !!state$.value.auth.token),\n    // Execute search with computed query string\n    map(() => executeSearch.request(getQueryString(state$.value.query.query)))\n  );\n\n/**\n * When our app first hydrates on load, take action\n */\nconst rehydrationEpic: RootEpic = (action$, state$) =>\n  action$.pipe(\n    ofType(REHYDRATE),\n    mergeMapTo(\n      concat(\n        // Refresh our query results if we are logged in\n        of(\n          executeSearch.request(getQueryString(state$.value.query.query))\n        ).pipe(filter(() => !!state$.value.auth.token)),\n\n        // Start polling if polling is set to active and we are logged in\n        of(startPolling()).pipe(\n          filter(() => !!state$.value.query.polling.active),\n          filter(() => !!state$.value.auth.token)\n        )\n      )\n    )\n  );\n\nconst pollQuery: RootEpic = (action$, state$) =>\n  action$.pipe(\n    ofType(startPolling),\n    switchMapTo(\n      timer(0, 1000).pipe(\n        // Compute diff between polling time and current counter value\n        map(val => state$.value.query.polling.interval - val),\n        takeWhile(val => val >= 0),\n        map(setPollingTimer),\n        repeat(),\n        takeUntil(action$.pipe(ofType(stopPolling)))\n      )\n    )\n  );\n\n/**\n * Execute search with Github\n */\nconst executeSearchEpic: RootEpic = (action$, state$, { github, ajax }) =>\n  action$.pipe(\n    filter(isActionOf(executeSearch.request)),\n    // switchMap ensures we ignore the results of ongoing search requests\n    switchMap(({ payload }) =>\n      from(\n        // TODO: Consider using the ajax tool to enable cancellation\n        github.query({ query: payload, token: state$.value.auth.token })\n      ).pipe(\n        map(response => executeSearch.success(response)),\n        catchError(message => of(executeSearch.failure(message)))\n      )\n    )\n  );\n\nexport const epics = [\n  setUrl,\n  loadFromUrl,\n  triggerSearchEpic,\n  executeSearchEpic,\n  pollQuery,\n  rehydrationEpic\n];\n","import { QueryState } from \"./query.reducer\";\n\nexport const getQueryFromString = (url: string) =>\n  decodeURIComponent(url)\n    .split(\" \")\n    .map(v => v.split(\":\"))\n    .reduce(\n      (acc, v) => ({\n        ...acc,\n        // Anything aside from 'sort' or 'repo' goes in search\n        ...(v.filter(Boolean).length === 1 || ![\"sort\", \"repo\"].includes(v[0])\n          ? {\n              search: acc.search ? `${acc.search} ${v.join(\":\")}` : v.join(\":\")\n            }\n          : // Put anything with a ':' in store under key\n            {\n              [v[0]]: (acc[v[0] as keyof QueryState[\"query\"]] || []).concat(\n                v.slice(1).join(\":\") // rejoin any colons in value\n              )\n            })\n      }),\n      {} as QueryState[\"query\"]\n    );\n","import { combineEpics } from \"redux-observable\";\nimport { epics as authEpics } from \"./auth/auth.epics\";\nimport { epics as queryEpics } from \"./query/query.epics\";\n\nexport const rootEpic = combineEpics(...authEpics, ...queryEpics);\n","import { ajax } from \"rxjs/ajax\";\nimport { Github } from \"./Github\";\n\nexport const services = {\n  github: new Github(),\n  ajax\n};\n","import { graphql } from \"@octokit/graphql\";\n\nexport class Github {\n  async query({ query, token }: { query: string; token: string }) {\n    return graphql(\n      `\n        query($searchQuery: String!) {\n          search(query: $searchQuery, type: ISSUE, first: 100) {\n            issueCount\n            nodes {\n              ... on Issue {\n                title\n                number\n                repository {\n                  owner {\n                    login\n                  }\n                  name\n                }\n                author {\n                  login\n                  avatarUrl\n                }\n                createdAt\n                closedAt\n                reactions(first: 100) {\n                  edges {\n                    node {\n                      content\n                    }\n                  }\n                }\n                comments {\n                  totalCount\n                }\n              }\n            }\n          }\n        }\n      `,\n      {\n        searchQuery: query,\n        headers: {\n          authorization: `Bearer ${token}`\n        }\n      }\n    ) as Promise<IssuesSearchResult>;\n  }\n}\n\nexport interface IssuesSearchResult {\n  search: Search;\n}\ninterface Search {\n  issueCount: number;\n  nodes: IssueNode[];\n}\nexport interface IssueNode {\n  title: string;\n  number: number;\n  repository: Repository;\n  author: Author;\n  createdAt: string;\n  closedAt: string;\n  reactions: Reactions;\n  comments: {\n    totalCount: number;\n  };\n}\ninterface Repository {\n  name: string;\n  owner: {\n    login: string;\n  };\n}\ninterface Author {\n  login: string;\n  avatarUrl: string;\n}\ninterface Reactions {\n  edges?: Array<ReactionEdgesEntity | null> | null;\n}\ninterface ReactionEdgesEntity {\n  node: ReactionsNode;\n}\ninterface ReactionsNode {\n  content: string;\n}\n","const apiBase = process.env.REACT_APP_API_URL;\nif (!apiBase) throw new Error('Variable \"REACT_APP_API_URL\" not set');\nconst clientId = process.env.REACT_APP_GH_CLIENT_ID;\nif (!clientId) throw new Error('Variable \"REACT_APP_GH_CLIENT_ID\" not set');\nconst domain = process.env.REACT_APP_DOMAIN;\nif (!domain) throw new Error('Variable \"REACT_APP_DOMAIN\" not set');\n\nexport default {\n  clientId,\n  domain,\n  searchDebounceMs: 300,\n  api: {\n    auth: `${apiBase}/auth`\n  },\n  paths: {\n    feed: \"/\",\n    login: \"/login\"\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\nimport { History } from \"history\";\nimport auth from \"./auth/auth.reducer\";\nimport query from \"./query/query.reducer\";\n\nexport const rootReducer = (history: History) =>\n  combineReducers({\n    router: connectRouter(history),\n    auth,\n    query\n  });\n","import { createStore, applyMiddleware } from \"redux\";\nimport { createEpicMiddleware } from \"redux-observable\";\nimport { persistStore, persistReducer, PersistConfig } from \"redux-persist\";\nimport { createBrowserHistory } from \"history\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport { routerMiddleware as createRouterMiddleware } from \"connected-react-router\";\n\nimport { composeEnhancers } from \"./utils\";\nimport { rootReducer } from \"./root-reducer\";\nimport { rootEpic } from \"./root-epic\";\nimport { services } from \"../services\";\nimport { RootAction, RootState, EpicDependencies } from \"./types\";\nimport config from \"../config\";\n\n// browser history\nexport const history = createBrowserHistory();\n\nexport const epicMiddleware = createEpicMiddleware<\n  RootAction,\n  RootAction,\n  RootState,\n  EpicDependencies\n>({ dependencies: { ...services, config } });\n\nconst routerMiddleware = createRouterMiddleware(history);\n\n// configure middlewares\nconst middlewares = [epicMiddleware, routerMiddleware];\n\n// compose enhancers\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\n// rehydrate state on app start\nconst initialState = {};\n\n// Set persistance\nconst persistConfig: PersistConfig<any> = {\n  key: \"root\",\n  storage,\n  whitelist: [\"auth\"]\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer(history));\n\n// create store\nexport const store = createStore(persistedReducer, initialState, enhancer);\nexport const persistor = persistStore(store);\n\n// connect redux-observables\nepicMiddleware.run(rootEpic);\n","import React from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { RootState } from \"../store/types\";\nimport { logout } from \"../store/auth/auth.actions\";\nimport config from \"../config\";\n\nexport const Nav: React.SFC<Props> = ({ isLoggedIn, dispatchLogout }) => (\n  <nav id=\"header\" className=\"navbar\">\n    <ul>\n      <li>\n        <img\n          className=\"logo\"\n          src={`${process.env.PUBLIC_URL}/favicon.png`}\n          alt=\"ds news logo\"\n        />\n        <h1>ds news</h1>\n      </li>\n      <li>\n        <a className=\"selected\" href={config.paths.feed}>\n          feed\n        </a>\n      </li>\n    </ul>\n    <ul>\n      <li>\n        {isLoggedIn ? (\n          <button onClick={dispatchLogout} className=\"link-button\">\n            logout\n          </button>\n        ) : (\n          <a\n            href={`https://github.com/login/oauth/authorize?client_id=${config.clientId}&redirect_uri=${config.domain}/${config.paths.login}&scope=repo`}\n          >\n            Login with Github\n          </a>\n        )}\n      </li>\n    </ul>\n  </nav>\n);\n\ninterface StateProps {\n  isLoggedIn: boolean;\n}\ninterface DispatchProps {\n  dispatchLogout: typeof logout;\n}\ninterface OwnProps {}\ntype Props = StateProps & DispatchProps & OwnProps;\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(\n  ({ auth }) => ({ isLoggedIn: !!auth.token }),\n  dispatch => bindActionCreators({ dispatchLogout: logout }, dispatch)\n)(Nav);\n","import React, { useEffect } from \"react\";\nimport { RouteComponentProps, Redirect } from \"react-router\";\nimport qs from \"query-string\";\nimport { fetchToken } from \"../store/auth/auth.actions\";\nimport { connect } from \"react-redux\";\nimport { RootState } from \"../store/types\";\nimport { bindActionCreators } from \"redux\";\n\nconst Login: React.SFC<Props> = ({ location, dispatchfetchToken, token }) => {\n  // Get code from QueryString\n  // TODO: Stop using 'query-string', instead get query from router.location.query in redux\n  const { code } = qs.parse(location.search);\n  const authToken = Array.isArray(code) ? code[0] : code;\n\n  useEffect(() => {\n    if (!authToken) return;\n    dispatchfetchToken(authToken);\n  }, [authToken, dispatchfetchToken]);\n\n  if (!code) {\n    return <p className=\"error\">No code provided. Please login.</p>;\n  }\n  if (token) {\n    return <Redirect to=\"/\" />;\n  }\n  return <p>Fetching auth token... {token}</p>;\n};\n\ninterface StateProps {\n  token: string;\n}\ninterface DispatchProps {\n  dispatchfetchToken: typeof fetchToken.request;\n}\ninterface OwnProps extends RouteComponentProps<{ code: string }> {}\ntype Props = StateProps & DispatchProps & OwnProps;\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(\n  ({ auth }) => ({ token: auth.token }),\n  dispatch =>\n    bindActionCreators({ dispatchfetchToken: fetchToken.request }, dispatch)\n)(Login);\n","import React from \"react\";\nimport { Emoji } from \"emoji-mart\";\nimport moment from \"moment\";\nimport { IssueNode } from \"../../services/Github\";\n\nconst emojis = {\n  CONFUSED: \":confused:\",\n  EYES: \":eyes:\",\n  HEART: \":heart:\",\n  HOORAY: \":tada:\",\n  LAUGH: \":smile:\",\n  ROCKET: \":rocket:\",\n  THUMBS_DOWN: \":-1:\",\n  THUMBS_UP: \":+1:\"\n};\n\nexport default ({\n  title,\n  number,\n  author,\n  createdAt,\n  closedAt,\n  repository,\n  reactions,\n  comments\n}: Props) => (\n  <li className={closedAt ? \"closed\" : \"\"}>\n    <h6 className=\"mb-0\">\n      <a\n        href={`https://github.com/${repository?.owner.login}/${repository?.name}/issues/${number}`}\n      >\n        {title}\n      </a>\n    </h6>\n\n    <p>\n      <a\n        href={`https://github.com/${repository?.owner.login}/${repository?.name}/issues/${number}`}\n      >\n        <strong>{repository?.name}</strong>#{number}\n      </a>\n      {\" by \"}\n      {/* Author */}\n      <a href={`https://github.com/${author?.login}`}>{author?.login}</a>{\" \"}\n      {/* Created */}\n      <span title={createdAt!}>{moment(createdAt!).fromNow()}</span>\n      {/* Closed */}\n      {closedAt && (\n        <em className=\"small\" title={closedAt!}>\n          {\" \"}\n          (closed {moment(closedAt).fromNow()})\n        </em>\n      )}\n      {\" | \"}\n      {/* Reactions */}\n      {reactions.edges?.length ? (\n        Object.entries(\n          reactions?.edges?.reduce(\n            (acc, edge) => ({\n              ...acc,\n              [edge?.node.content || \"\"]:\n                (acc[edge?.node.content || \"\"] || 0) + 1\n            }),\n            {} as Record<string, number>\n          ) || {}\n        )\n          .slice()\n          .sort(([r1], [r2]) => (r2 > r1 ? -1 : 1))\n          .map(([reaction, count]) => (\n            <span key={reaction}>\n              <Emoji\n                emoji={emojis[reaction as keyof typeof emojis]}\n                size={16}\n                tooltip\n              />\n              {count > 1 && <sup>{count}</sup>}\n            </span>\n          ))\n      ) : (\n        <em className=\"small\">no reactions</em>\n      )}\n      {\" | \"}\n      <span>\n        {comments.totalCount ? (\n          <>\n            <Emoji emoji={\"speech_balloon\"} size={16} tooltip />\n            <sup>\n              {comments.totalCount === 100 ? \"100+\" : comments.totalCount}\n            </sup>\n          </>\n        ) : (\n          <em className=\"small\">no comments</em>\n        )}\n      </span>\n    </p>\n  </li>\n);\n\ninterface Props extends IssueNode {}\n","import React, { useState } from \"react\";\nimport { RootState } from \"../../store/types\";\nimport { rmRepo, addRepo } from \"../../store/query/query.actions\";\n\nexport default ({\n  query: { repo },\n  results,\n  dispatchAddRepo,\n  dispatchRmRepo\n}: Props) => {\n  const [repoName, setRepoName] = useState(\"\");\n  return (\n    <ul className=\"col-sm-3 list-unstyled sidebar\">\n      <li className=\"mt-2 \">\n        <h4>last updated</h4>\n        <span className=\"text-monospace small\">\n          {results &&\n            (results.status === \"FETCHING\"\n              ? \"loading...\"\n              : `${results.asOf.toLowerCase()}`)}\n        </span>\n      </li>\n\n      <li>\n        <h4>Repos</h4>\n        <ul className=\"list-unstyled\">\n          {repo\n            .slice()\n            .sort()\n            .map((repo, i) => (\n              <li key={i} className=\"overflow-auto text-nowrap\">\n                <span\n                  className=\"ml-1 close-link\"\n                  title=\"remove repo\"\n                  onClick={() => dispatchRmRepo(repo)}\n                />\n                <pre className=\"ml-1 d-inline\">{repo}</pre>\n              </li>\n            ))}\n        </ul>\n        <form\n          onSubmit={e => {\n            e.preventDefault();\n            dispatchAddRepo(repoName);\n            setRepoName(\"\");\n          }}\n        >\n          <input\n            type=\"text\"\n            placeholder=\"owner/repo\"\n            className=\"small text-monospace w-100 pl-1 mt-2\"\n            value={repoName}\n            onChange={e => setRepoName(e.currentTarget.value)}\n          />\n        </form>\n      </li>\n    </ul>\n  );\n};\n\ninterface Props {\n  query: RootState[\"query\"][\"query\"];\n  results: RootState[\"query\"][\"results\"];\n  dispatchAddRepo: typeof addRepo;\n  dispatchRmRepo: typeof rmRepo;\n}\n","import React from \"react\";\nimport {\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\nimport { QueryState } from \"../../store/query/query.reducer\";\n\nexport default ({ sort, setSort, searchTerm, setSearchTerm }: Props) => {\n  const sortOptions = {\n    created: \"recently created\",\n    updated: \"recently updated\",\n    interactions: \"interactions\",\n    \"reactions-heart\": \"loved\",\n    \"reactions-tada\": \"celebrated\",\n    reactions: \"reactions\",\n    \"reactions-+1\": \"liked\",\n    \"reactions--1\": \"disliked\"\n  };\n  return (\n    <nav className=\"navbar px-1\">\n      <ul className=\"d-flex\" style={{ flexGrow: 1 }}>\n        <li className=\"w-100\">\n          <input\n            placeholder=\"Search\"\n            value={searchTerm}\n            className=\"text-monospace w-100\"\n            onChange={(e: React.FormEvent<HTMLInputElement>) =>\n              setSearchTerm(e.currentTarget.value)\n            }\n          />\n        </li>\n      </ul>\n      <ul className=\"ml-auto\">\n        <li className=\"ml-2\">\n          <UncontrolledDropdown className=\"d-inline\">\n            <DropdownToggle tag=\"a\" className=\"link-button d-inline-block\">\n              most {sortOptions[sort as keyof typeof sortOptions]} ▼\n            </DropdownToggle>{\" \"}\n            <DropdownMenu>\n              {Object.entries(sortOptions).map(([key, value]) => (\n                <DropdownItem key={key} onClick={() => setSort(key)}>\n                  {value}\n                </DropdownItem>\n              ))}\n            </DropdownMenu>\n          </UncontrolledDropdown>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\ninterface Props {\n  sort: QueryState[\"query\"][\"sort\"];\n  setSort: (sort: string) => void;\n  searchTerm: QueryState[\"query\"][\"search\"];\n  setSearchTerm: (term: string) => void;\n}\n","import React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  setSearchTerm,\n  setSort,\n  addRepo,\n  rmRepo\n} from \"../../store/query/query.actions\";\nimport { RootState } from \"../../store/types\";\nimport Issue from \"./Issue\";\nimport Sidebar from \"./Sidebar\";\nimport NavFilter from \"./NavFilter\";\nimport { getQueryString } from \"../../store/query/query.selectors\";\n\nexport const Feed: React.SFC<Props> = ({\n  results,\n  query,\n  dispatchSetSort,\n  dispatchSetSearchTerm,\n  dispatchAddRepo,\n  dispatchRmRepo\n}) => (\n  <div className=\"row no-gutters\">\n    <div className=\"col-sm pr-1\">\n      <NavFilter\n        sort={query.sort}\n        setSort={dispatchSetSort}\n        searchTerm={query.search}\n        setSearchTerm={dispatchSetSearchTerm}\n      />\n      {results?.status === \"FAILED\" ? (\n        <pre>{results.error}</pre>\n      ) : (\n        results?.data && (\n          <ol className=\"issues\">\n            {results.data.search.nodes\n              ?.filter(node => Object.entries(node).length !== 0)\n              .map((node, i) => (\n                <Issue key={i} {...node} />\n              ))}\n          </ol>\n        )\n      )}\n      <code>{getQueryString(query)}</code>\n    </div>\n    <Sidebar\n      query={query}\n      results={results}\n      dispatchAddRepo={dispatchAddRepo}\n      dispatchRmRepo={dispatchRmRepo}\n    />\n  </div>\n);\ninterface StateProps {\n  query: RootState[\"query\"][\"query\"];\n  results: RootState[\"query\"][\"results\"];\n  polling: RootState[\"query\"][\"polling\"];\n}\ninterface DispatchProps {\n  dispatchSetSearchTerm: typeof setSearchTerm;\n  dispatchSetSort: typeof setSort;\n  dispatchAddRepo: typeof addRepo;\n  dispatchRmRepo: typeof rmRepo;\n}\ninterface OwnProps extends RouteComponentProps {}\ntype Props = StateProps & DispatchProps & OwnProps;\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(\n  ({ query: { query, results, polling } }) => ({\n    query,\n    results,\n    polling\n  }),\n  dispatch =>\n    bindActionCreators(\n      {\n        dispatchSetSearchTerm: setSearchTerm,\n        dispatchSetSort: setSort,\n        dispatchAddRepo: addRepo,\n        dispatchRmRepo: rmRepo\n      },\n      dispatch\n    )\n)(Feed);\n\n// interface StateProps {\n//   query: RootState[\"query\"][\"query\"];\n//   polling: RootState[\"query\"][\"polling\"];\n//   results: RootState[\"query\"][\"results\"];\n// }\n// interface DispatchProps {\n//   dispatchSetSearchTerm: typeof setSearchTerm;\n// }\n// interface OwnProps {}\n// type Props = StateProps & DispatchProps & OwnProps;\n\n// export default connect<StateProps, DispatchProps, OwnProps, RootState>(\n//   ({ query }) => ({\n//     query: query.query,\n//     polling: query.polling,\n//     results: query.results\n//   }),\n//   dispatch =>\n//     bindActionCreators(\n//       {\n//         dispatchSetSearchTerm: setSearchTerm,\n//         dispatchAddRepo: addRepo,\n//         dispatchRmRepo: rmRepo\n//       },\n//       dispatch\n//     )\n// )(Sidebar);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { store, history } from \"./store/store\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport Nav from \"./components/Nav\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from \"./views/Login\";\nimport Feed from \"./views/Feed\";\nimport { persistor } from \"./store/store\";\nimport config from \"./config\";\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <PersistGate persistor={persistor} loading={<p>Loading...</p>}>\n          <Router basename={process.env.PUBLIC_URL}>\n            <Nav />\n            <div className=\"container-fluid\">\n              <Switch>\n                <Route path={config.paths.login} component={Login} />\n                <Route path={config.paths.feed} component={Feed} />\n              </Switch>\n            </div>\n\n            {/* TODO:\n              - add router\n              - create /login route to handle oauth redirect\n                - fetch & store token\n            */}\n          </Router>\n        </PersistGate>\n      </ConnectedRouter>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/style.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}