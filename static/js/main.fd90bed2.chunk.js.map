{"version":3,"sources":["store/utils.ts","store/auth/auth.actions.ts","store/auth/auth.reducer.tsx","store/query/query.actions.ts","store/query/query.reducer.tsx","store/auth/auth.epics.ts","store/query/query.selectors.ts","store/query/query.epics.ts","store/query/utils.ts","store/root-epic.tsx","config.ts","store/root-reducer.tsx","services/index.ts","services/Github.ts","store/store.tsx","components/Nav.tsx","views/Login.tsx","views/Feed/Issue.tsx","views/Feed/Sidebar.tsx","views/Feed/NavFilter.tsx","views/Feed/index.tsx","views/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","fetchToken","createAsyncAction","logout","createAction","tokenReducer","createReducer","handleType","getType","request","state","action","status","data","undefined","error","success","payload","failure","combineReducers","token","setQuery","setSearchTerm","setSort","addRepo","rmRepo","ignoreRepo","unignoreRepo","addAuthor","rmAuthor","setAuthor","ignoreAuthor","unignoreAuthor","executeSearch","startPolling","stopPolling","setPollingTimer","initialState","search","repo","author","sort","ignoredRepo","ignoredAuthor","active","count","interval","queryReducer","handleAction","actions","includes","concat","filter","name","resultsReducer","asOf","moment","format","pollingReducer","query","results","polling","epics","action$","state$","ajax","config","pipe","isActionOf","switchMap","post","api","auth","code","Accept","map","response","error_description","split","join","access_token","catchError","message","of","getQueryString","createSelector","queryState","Object","entries","entry","value","Array","isArray","length","flatMap","key","v","queryChanged","prevState","curState","JSON","stringify","router","location","pathname","basePath","paths","feed","pairwise","debounceTime","searchDebounceMs","replace","encodeURIComponent","ofType","REHYDRATE","url","slice","decodeURIComponent","reduce","acc","Boolean","merge","github","from","err","switchMapTo","timer","val","takeWhile","takeUntil","rootEpic","combineEpics","authEpics","queryEpics","apiBase","process","domain","history","clientId","login","about","services","graphql","searchQuery","headers","authorization","createBrowserHistory","epicMiddleware","createEpicMiddleware","dependencies","middlewares","createRouterMiddleware","enhancer","applyMiddleware","persistConfig","storage","whitelist","persistedReducer","persistReducer","connectRouter","store","createStore","persistor","persistStore","run","connect","isLoggedIn","dispatch","bindActionCreators","dispatchLogout","useLocation","loginUrl","qs","stringifyUrl","client_id","redirect_uri","scope","id","className","src","alt","activeClassName","exact","to","onClick","href","dispatchfetchToken","parse","authToken","useEffect","emojis","CONFUSED","EYES","HEART","HOORAY","LAUGH","ROCKET","THUMBS_DOWN","THUMBS_UP","title","number","createdAt","closedAt","repository","reactions","comments","owner","avatarUrl","style","maxHeight","borderRadius","verticalAlign","fromNow","edges","edge","node","content","r1","reaction","emoji","size","tooltip","totalCount","QueryStatus","toLowerCase","RefreshCountdown","seconds","add","FilterEntry","props","remove","ignored","unignore","ignore","FilterList","dispatchRmEntry","dispatchIgnoreEntry","dispatchUnignoreEntry","fallbackText","i","bind","FilterForm","dispatchAddEntry","placeholder","useState","setEntry","onSubmit","e","preventDefault","type","onChange","currentTarget","secondsUntilNextPoll","repos","ignoredRepos","dispatchRmRepo","dispatchIgnoreRepo","dispatchUnignoreRepo","dispatchAddRepo","authors","ignoredAuthors","dispatchRmAuthor","dispatchIgnoreAuthor","dispatchUnignoreAuthor","dispatchAddAuthor","sortOptions","created","updated","interactions","searchTerm","isFetching","triggerSearch","flexGrow","disabled","role","UncontrolledDropdown","DropdownToggle","tag","DropdownMenu","DropdownItem","dispatchSetSearchTerm","dispatchTriggerSearch","dispatchSetSort","NavFilter","nodes","Issue","Sidebar","marginTop","App","isDark","setDark","matchMedia","matches","addEventListener","event","document","body","classList","loading","basename","path","component","Login","About","Feed","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd90bed2.chunk.js","sourcesContent":["import { compose } from \"redux\";\n\nexport const composeEnhancers =\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n","import { createAction, createAsyncAction } from \"typesafe-actions\";\n\nexport const fetchToken = createAsyncAction(\n  \"AUTH/FETCH_TOKEN_REQUEST\",\n  \"AUTH/FETCH_TOKEN_SUCCESS\",\n  \"AUTH/FETCH_TOKEN_FAILURE\"\n)<string, string, string>();\n\nexport const logout = createAction(\"AUTH/LOGOUT\")();\n","import { combineReducers } from \"redux\";\nimport { createReducer, getType } from \"typesafe-actions\";\nimport { fetchToken, logout } from \"./auth.actions\";\nimport { Async } from \"../types\";\n\nexport type AuthState = Readonly<{\n  token: null | Async<string, string>;\n}>;\nconst initialState: AuthState = {\n  token: null\n};\n\nconst tokenReducer = createReducer(initialState.token)\n  .handleType(getType(fetchToken.request), (state, action) => ({\n    status: \"FETCHING\",\n    data: undefined,\n    error: undefined\n  }))\n  .handleType(getType(fetchToken.success), (state, action) => ({\n    status: \"SUCCESS\",\n    data: action.payload,\n    error: undefined\n  }))\n  .handleType(getType(fetchToken.failure), (state, action) => ({\n    status: \"FAILED\",\n    data: undefined,\n    error: action.payload\n  }))\n  .handleType(getType(logout), () => null);\n\n// TODO: Handle fetchToken.failure, fetchToken.start\n\nexport default combineReducers({\n  token: tokenReducer\n});\n","import { createAction, createAsyncAction } from \"typesafe-actions\";\nimport { IssuesSearchResult } from \"../../services/Github\";\nimport { QueryState } from \"./query.reducer\";\n\nexport const setQuery = createAction(\"QUERY/SET\")<QueryState[\"query\"]>();\nexport const setSearchTerm = createAction(\"QUERY/SET_SEARCH_TERM\")<string>();\nexport const setSort = createAction(\"QUERY/SET_SORT\")<string>();\n\nexport const addRepo = createAction(\"QUERY/REPO_ADD\")<string>();\nexport const rmRepo = createAction(\"QUERY/REPO_RM\")<string>();\nexport const ignoreRepo = createAction(\"QUERY/REPO_IGNORE\")<string>();\nexport const unignoreRepo = createAction(\"QUERY/REPO_UNIGNORE\")<string>();\n\nexport const addAuthor = createAction(\"QUERY/AUTHOR_ADD\")<string>();\nexport const rmAuthor = createAction(\"QUERY/AUTHOR_RM\")<string>();\nexport const setAuthor = createAction(\"QUERY/AUTHOR_SET\")<string>();\nexport const ignoreAuthor = createAction(\"QUERY/AUTHOR_IGNORE\")<string>();\nexport const unignoreAuthor = createAction(\"QUERY/AUTHOR_UNIGNORE\")<string>();\n\nexport const executeSearch = createAsyncAction(\n  \"QUERY/SEARCH_REQUEST\",\n  \"QUERY/SEARCH_SUCCESS\",\n  \"QUERY/SEARCH_FAILURE\"\n)<undefined, IssuesSearchResult, string>();\n\nexport const startPolling = createAction(\"QUERY/START_POLLING\")();\nexport const stopPolling = createAction(\"QUERY/STOP_POLLING\")();\nexport const setPollingTimer = createAction(\"QUERY/SET_POLLING_TIMER\")<\n  number\n>();\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"typesafe-actions\";\nimport * as actions from \"./query.actions\";\nimport { Async } from \"../types\";\nimport { IssuesSearchResult } from \"../../services/Github\";\nimport moment from \"moment\";\n\n// TODO: Clear query results on logout\nexport type QueryState = Readonly<{\n  query: {\n    search: string;\n    repo: string[];\n    author: string[];\n    sort: string;\n    ignoredRepo: string[];\n    ignoredAuthor: string[];\n  };\n  results: null | (Async<IssuesSearchResult, string> & { asOf: string });\n  polling: {\n    active: boolean;\n    count: null | number;\n    interval: number;\n  };\n}>;\nconst initialState: QueryState = {\n  query: {\n    search: \"\",\n    repo: [],\n    author: [],\n    sort: \"created\",\n    ignoredRepo: [],\n    ignoredAuthor: []\n  },\n  results: null,\n  polling: {\n    active: true,\n    count: null,\n    interval: 5 * 60\n  }\n};\n\nconst queryReducer = createReducer(initialState.query)\n  .handleAction(actions.setSearchTerm, (state, { payload }) => ({\n    ...state,\n    search: payload\n  }))\n  .handleAction(actions.setQuery, (state, { payload }) => ({\n    ...initialState.query,\n    ...payload\n  }))\n  .handleAction(actions.setSort, (state, { payload }) => ({\n    ...state,\n    sort: payload\n  }))\n  .handleAction(actions.addRepo, ({ repo, ...state }, { payload }) => ({\n    ...state,\n    repo: repo.includes(payload) ? repo : repo.concat(payload)\n  }))\n  .handleAction(actions.rmRepo, ({ repo, ...state }, { payload }) => ({\n    ...state,\n    repo: repo.filter(name => name !== payload)\n  }))\n  .handleAction(actions.ignoreRepo, (state, { payload }) => ({\n    ...state,\n    ignoredRepo: state.ignoredRepo.concat(payload)\n  }))\n  .handleAction(actions.unignoreRepo, (state, { payload }) => ({\n    ...state,\n    ignoredRepo: state.ignoredRepo.filter(repo => repo !== payload)\n  }))\n  .handleAction(actions.addAuthor, ({ author, ...state }, { payload }) => ({\n    ...state,\n    author: author.includes(payload) ? author : author.concat(payload)\n  }))\n  .handleAction(actions.rmAuthor, ({ author, ...state }, { payload }) => ({\n    ...state,\n    author: author.filter(name => name !== payload)\n  }))\n  .handleAction(actions.setAuthor, (state, { payload }) => ({\n    ...state,\n    author: [payload]\n  }))\n  .handleAction(actions.ignoreAuthor, (state, { payload }) => ({\n    ...state,\n    ignoredAuthor: state.ignoredAuthor.concat(payload)\n  }))\n  .handleAction(actions.unignoreAuthor, (state, { payload }) => ({\n    ...state,\n    ignoredAuthor: state.ignoredAuthor.filter(author => author !== payload)\n  }));\n\nconst resultsReducer = createReducer(initialState.results)\n  .handleAction(actions.executeSearch.request, (state, action) => ({\n    status: \"FETCHING\",\n    data: state?.data,\n    error: undefined,\n    asOf: moment().format(\"LLL\")\n  }))\n  .handleAction(actions.executeSearch.success, (state, { payload }) => ({\n    status: \"SUCCESS\",\n    data: payload,\n    error: undefined,\n    asOf: moment().format(\"LLL\")\n  }))\n  .handleAction(actions.executeSearch.failure, (state, { payload }) => ({\n    status: \"FAILED\",\n    data: undefined,\n    error: payload,\n    asOf: moment().format(\"LLL\")\n  }));\n\nconst pollingReducer = createReducer(initialState.polling)\n  .handleAction(actions.startPolling, state => ({\n    ...state,\n    active: true\n  }))\n  .handleAction(actions.stopPolling, state => ({\n    ...state,\n    count: null,\n    active: false\n  }))\n  .handleAction(actions.setPollingTimer, (state, { payload }) => ({\n    ...state,\n    count: payload\n  }));\n\nexport default combineReducers({\n  query: queryReducer,\n  results: resultsReducer,\n  polling: pollingReducer\n});\n","import { of } from \"rxjs\";\nimport { catchError, filter, map, switchMap } from \"rxjs/operators\"; // tslint:disable-line\nimport { isActionOf, RootEpic } from \"typesafe-actions\";\nimport { fetchToken } from \"./auth.actions\";\n\nconst fetchGithubToken: RootEpic = (action$, state$, { ajax, config }) =>\n  action$.pipe(\n    filter(isActionOf(fetchToken.request)),\n    switchMap(({ payload }) =>\n      ajax\n        .post(\n          config.api.auth,\n          { code: payload },\n          {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n          }\n        )\n        .pipe(\n          map(response => response.response),\n          map(response =>\n            response.error\n              ? fetchToken.failure(\n                response.error_description.split(\"+\").join(\" \")\n              )\n              : response.access_token\n                ? fetchToken.success(response.access_token)\n                : fetchToken.failure(\"Received invalid access token\")\n          ),\n          catchError(message => of(fetchToken.failure(message)))\n        )\n    )\n  );\n\nexport const epics = [fetchGithubToken];\n","import { createSelector } from \"reselect\";\nimport { QueryState } from \"./query.reducer\";\n\nconst getQuery = (query: QueryState[\"query\"]) => query;\n\n/**\n * Convert the query object into a Github compliant query string\n */\nexport const getQueryString = createSelector([getQuery], (queryState) => {\n  const { repo, author, ignoredAuthor, ignoredRepo, ...query } = queryState;\n  return (\n    Object.entries({\n      ...query,\n      repo: repo.filter((entry) => !ignoredRepo.includes(entry)),\n      author: author.filter((entry) => !ignoredAuthor.includes(entry)),\n    })\n      // Ignore empty queries\n      .filter(([_, value]) => (Array.isArray(value) ? value.length : value))\n      // Break array values into array of key + value\n      .flatMap(([key, value]) =>\n        Array.isArray(value)\n          ? (value as Array<number | string>).map((v) => [key, v])\n          : [[key, value]]\n      )\n      // Format as key:value\n      .map(([key, value]) => (key === \"search\" ? value : `${key}:${value}`))\n      .join(\" \")\n  );\n});\n","import { replace } from \"connected-react-router\";\nimport { ofType } from \"redux-observable\";\nimport { REHYDRATE } from \"redux-persist\";\nimport { from, merge, of, timer } from \"rxjs\";\nimport {\n  catchError,\n  debounceTime,\n  filter,\n  flatMap,\n  map,\n  pairwise,\n  switchMap,\n  switchMapTo,\n  takeUntil,\n  takeWhile\n} from \"rxjs/operators\";\nimport { EmptyAction, isActionOf, PayloadAction, RootEpic, RootState } from \"typesafe-actions\";\nimport { fetchToken } from \"../auth/auth.actions\";\nimport {\n  executeSearch,\n  setPollingTimer,\n  setQuery,\n  startPolling,\n  stopPolling\n} from \"./query.actions\";\nimport { getQueryString } from \"./query.selectors\";\nimport { getQueryFromString } from \"./utils\";\n\nconst queryChanged = ([prevState, curState]: [RootState, RootState]) =>\n  JSON.stringify(prevState.query.query) !==\n  JSON.stringify(curState.query.query);\n\n/**\n * When our search parameters update, update URL\n */\nconst setUrl: RootEpic = (action$, state$, { config }) =>\n  // On query change\n  state$.pipe(\n    filter(\n      () =>\n        state$.value.router.location.pathname ===\n        `${config.basePath}${config.paths.feed}`\n    ),\n    pairwise(),\n    filter(queryChanged),\n    debounceTime(config.searchDebounceMs), // Without debounce, the app can feel sluggish when each keystroke updates the URL\n    map(([_, curState]) => curState.query.query),\n    map(query =>\n      replace({\n        ...state$.value.router.location,\n        search: `q=${encodeURIComponent(getQueryString(query))}`\n      })\n    )\n  );\n\n/**\n * When we load application, rehydrate query from URL\n */\nconst loadFromUrl: RootEpic = (action$, state$, { config }) =>\n  action$.pipe(\n    ofType(REHYDRATE),\n    filter(\n      () =>\n        state$.value.router.location.pathname ===\n        `${config.basePath}${config.paths.feed}`\n    ),\n    map(() =>\n      setQuery(\n        getQueryFromString(state$.value.router.location.search.slice(3)) // Slice to ignore '?q='\n      )\n    )\n  );\n\n/**\n * Trigger a search to Github in response to particular events\n */\nconst triggerSearchEpic: RootEpic = (action$, state$, { config }) =>\n  // Trigger search on...\n  merge(\n    // ... actions where login occurred\n    action$.pipe(filter(isActionOf(fetchToken.success))),\n\n    // ... states where compared to last state query has changed\n    state$.pipe(pairwise(), filter(queryChanged))\n  ).pipe(\n    // Only if user has an access token\n    filter(() => !!state$.value.auth.token?.data),\n    // Throttle search executions\n    debounceTime(config.searchDebounceMs),\n    // Execute search with computed query string\n    map(() => executeSearch.request())\n  );\n\n/**\n * When our app first hydrates on load, take action\n */\nconst rehydrationEpic: RootEpic = (action$, state$) =>\n  action$.pipe(\n    ofType(REHYDRATE),\n    switchMapTo(\n      of(\n        // Refresh our query results\n        executeSearch.request(),\n        // Start polling\n        startPolling()\n      )\n    )\n  );\n\nconst pollQuery: RootEpic = (action$, state$) =>\n  action$.pipe(\n    filter(isActionOf(startPolling)),\n\n    // if polling is set to active and we are logged in\n    filter(() => !!state$.value.query.polling.active),\n\n    // if we are logged in\n    filter(() => !!state$.value.auth.token?.data),\n\n    switchMapTo(\n      timer(0, 1000).pipe(\n        // Compute diff between polling time and current counter value\n        map(val => state$.value.query.polling.interval - val),\n        takeWhile(val => val >= 0),\n        flatMap((val) => of(\n          ...([] as (EmptyAction<any> | PayloadAction<any, any>)[])\n            .concat(setPollingTimer(val))\n            // Search when poll counter hits 0\n            .concat(val === 0 ? executeSearch.request() : []),\n        )),\n        takeUntil(action$.pipe(ofType(stopPolling)))\n      )\n    )\n  );\n\n/**\n * Execute search with Github\n */\nconst executeSearchEpic: RootEpic = (action$, state$, { github, ajax }) =>\n  action$.pipe(\n    filter(isActionOf(executeSearch.request)),\n\n    // switchMap ensures we ignore the results of ongoing search requests\n    switchMap(() =>\n      state$.value.auth.token?.data\n        ? from(\n          github.query({\n            query: getQueryString(state$.value.query.query),\n            token: state$.value.auth.token.data\n          })\n        ).pipe(\n          flatMap(response => of(\n            // Emit search response\n            executeSearch.success(response),\n            // Restart polling\n            startPolling()\n          )\n          ),\n          catchError(err =>\n            of(\n              executeSearch.failure(`Failed to query Github: ${err.message}`)\n            )\n          )\n        )\n        : of(executeSearch.failure(\"You must be logged in to query Github\"))\n    )\n  );\n\nexport const epics = [\n  setUrl,\n  loadFromUrl,\n  triggerSearchEpic,\n  executeSearchEpic,\n  pollQuery,\n  rehydrationEpic\n];\n","import { QueryState } from \"./query.reducer\";\n\nexport const getQueryFromString = (url: string) =>\n  decodeURIComponent(url)\n    .split(\" \")\n    .map(v => v.split(\":\"))\n    .reduce(\n      (acc, v) => ({\n        ...acc,\n        // Anything aside from 'sort' or 'repo' goes in search\n        ...(v.filter(Boolean).length === 1 || ![\"sort\", \"repo\", \"author\"].includes(v[0])\n          ? {\n            search: acc.search ? `${acc.search} ${v.join(\":\")}` : v.join(\":\")\n          }\n          : // Put anything with a ':' in store under key\n          {\n            [v[0]]: (acc[v[0] as keyof QueryState[\"query\"]] || []).concat(\n              v.slice(1).join(\":\") // rejoin any colons in value\n            )\n          })\n      }),\n      {} as QueryState[\"query\"]\n    );\n","import { combineEpics } from \"redux-observable\";\nimport { epics as authEpics } from \"./auth/auth.epics\";\nimport { epics as queryEpics } from \"./query/query.epics\";\n\nexport const rootEpic = combineEpics(...authEpics, ...queryEpics);\n","const apiBase = process.env.REACT_APP_API_URL;\nif (!apiBase) throw new Error('Variable \"REACT_APP_API_URL\" not set');\nconst clientId = process.env.REACT_APP_GH_CLIENT_ID;\nif (!clientId) throw new Error('Variable \"REACT_APP_GH_CLIENT_ID\" not set');\nconst domain = process.env.REACT_APP_DOMAIN;\nif (!domain) throw new Error('Variable \"REACT_APP_DOMAIN\" not set');\n\nexport default {\n  clientId,\n  domain,\n  searchDebounceMs: 300,\n  basePath: process.env.PUBLIC_URL,\n  api: {\n    auth: `${apiBase}/auth`\n  },\n  paths: {\n    feed: \"/\",\n    login: \"/login\",\n    about: \"/about\",\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\nimport { History } from \"history\";\nimport auth from \"./auth/auth.reducer\";\nimport query from \"./query/query.reducer\";\n\nexport const rootReducer = (history: History) =>\n  combineReducers({\n    router: connectRouter(history),\n    auth,\n    query\n  });\n","import { ajax } from \"rxjs/ajax\";\nimport config from \"../config\";\nimport { Github } from \"./Github\";\n\nexport const services = {\n  ajax,\n  config,\n  github: new Github()\n};\n","import { graphql } from \"@octokit/graphql\";\n\nexport class Github {\n  query = ({ query, token }: { query: string; token: string }) =>\n    graphql(\n      `\n        query($searchQuery: String!) {\n          search(query: $searchQuery, type: ISSUE, first: 100) {\n            issueCount\n            nodes {\n              ... on Issue {\n                title\n                number\n                repository {\n                  owner {\n                    login\n                  }\n                  name\n                }\n                author {\n                  login\n                  avatarUrl\n                }\n                createdAt\n                closedAt\n                reactions(first: 100) {\n                  edges {\n                    node {\n                      content\n                    }\n                  }\n                }\n                comments {\n                  totalCount\n                }\n              }\n            }\n          }\n        }\n      `,\n      {\n        searchQuery: query,\n        headers: {\n          authorization: `Bearer ${token}`\n        }\n      }\n    ) as Promise<IssuesSearchResult>;\n}\n\nexport interface IssuesSearchResult {\n  search: Search;\n}\ninterface Search {\n  issueCount: number;\n  nodes: IssueNode[];\n}\nexport interface IssueNode {\n  title: string;\n  number: number;\n  repository: Repository;\n  author: Author;\n  createdAt: string;\n  closedAt: string;\n  reactions: Reactions;\n  comments: {\n    totalCount: number;\n  };\n}\ninterface Repository {\n  name: string;\n  owner: {\n    login: string;\n  };\n}\ninterface Author {\n  login: string;\n  avatarUrl: string;\n}\ninterface Reactions {\n  edges?: Array<ReactionEdgesEntity | null> | null;\n}\ninterface ReactionEdgesEntity {\n  node: ReactionsNode;\n}\ninterface ReactionsNode {\n  content: string;\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport { createEpicMiddleware } from \"redux-observable\";\nimport { persistStore, persistReducer, PersistConfig } from \"redux-persist\";\nimport { createBrowserHistory } from \"history\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport { routerMiddleware as createRouterMiddleware } from \"connected-react-router\";\n\nimport { composeEnhancers } from \"./utils\";\nimport { rootReducer } from \"./root-reducer\";\nimport { rootEpic } from \"./root-epic\";\nimport { services } from \"../services\";\nimport { RootAction, RootState, Services } from \"typesafe-actions\";\n\n// browser history\nexport const history = createBrowserHistory();\n\nexport const epicMiddleware = createEpicMiddleware<\n  RootAction,\n  RootAction,\n  RootState,\n  Services\n>({ dependencies: services });\n\nconst routerMiddleware = createRouterMiddleware(history);\n\n// configure middlewares\nconst middlewares = [epicMiddleware, routerMiddleware];\n\n// compose enhancers\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\n// rehydrate state on app start\nconst initialState = {};\n\n// Set persistance\nconst persistConfig: PersistConfig<any> = {\n  key: \"root\",\n  storage,\n  whitelist: [\"auth\", \"query\"]\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer(history));\n\n// create store\nexport const store = createStore(persistedReducer, initialState, enhancer);\nexport const persistor = persistStore(store);\n\n// connect redux-observables\nepicMiddleware.run(rootEpic);\n","import React from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport qs from \"query-string\";\nimport { connect } from \"react-redux\";\nimport { RootState } from \"typesafe-actions\";\nimport { logout } from \"../store/auth/auth.actions\";\nimport { NavLink, useLocation } from \"react-router-dom\";\nimport config from \"../config\";\n\nexport const Nav: React.SFC<Props> = ({ isLoggedIn, dispatchLogout }) => {\n  const { search } = useLocation();\n  const loginUrl = qs.stringifyUrl({\n    url: \"https://github.com/login/oauth/authorize\",\n    query: {\n      client_id: config.clientId,\n      redirect_uri: `${config.domain}${config.basePath}${config.paths.login}`,\n      scope: \"repo\",\n      state: search, // Pass current query params as \"state\" param\n    },\n  });\n  return (\n    <nav id=\"header\" className=\"navbar\">\n      <ul>\n        <li>\n          <img\n            className=\"logo\"\n            src={`${process.env.PUBLIC_URL}/favicon.png`}\n            alt=\"ds news logo\"\n          />\n          <h1>ds news</h1>\n        </li>\n        <li>\n          <NavLink\n            activeClassName=\"selected\"\n            exact\n            to={`${process.env.PUBLIC_URL}${config.paths.feed}`}\n          >\n            feed\n          </NavLink>\n        </li>\n        {/* <li>\n          <NavLink\n            activeClassName=\"selected\"\n            exact\n            to={`${process.env.PUBLIC_URL}${config.paths.about}`}\n          >\n            about\n          </NavLink>\n        </li> */}\n      </ul>\n      <ul>\n        <li>\n          {isLoggedIn ? (\n            <button onClick={dispatchLogout} className=\"link-button\">\n              logout\n            </button>\n          ) : (\n            <a href={loginUrl}>Login with Github</a>\n          )}\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\ninterface StateProps {\n  isLoggedIn: boolean;\n}\ninterface DispatchProps {\n  dispatchLogout: typeof logout;\n}\ninterface OwnProps {}\ntype Props = StateProps & DispatchProps & OwnProps;\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(\n  ({ auth }) => ({\n    isLoggedIn: !!auth.token?.data,\n  }),\n  (dispatch) => bindActionCreators({ dispatchLogout: logout }, dispatch)\n)(Nav);\n","import React, { useEffect } from \"react\";\nimport { RouteComponentProps, Redirect } from \"react-router\";\nimport qs from \"query-string\";\nimport { RootState } from \"typesafe-actions\";\nimport { fetchToken } from \"../store/auth/auth.actions\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { AuthState } from \"../store/auth/auth.reducer\";\nimport config from \"../config\";\n\nconst Login: React.SFC<Props> = ({ location, dispatchfetchToken, token }) => {\n  // Get code from QueryString\n  // TODO: Stop using 'query-string', instead get query from router.location.query in redux\n  const { code, state = \"\" } = qs.parse(location.search);\n  const authToken = Array.isArray(code) ? code[0] : code;\n\n  // TODO: Mv this logic to Redux Observables\n  useEffect(() => {\n    if (!authToken) return;\n    dispatchfetchToken(authToken);\n  }, [authToken, dispatchfetchToken]);\n\n  if (!code) {\n    return <p className=\"error\">No code provided. Please login.</p>;\n  }\n  return token?.status === \"FETCHING\" ? (\n    <p>Fetching auth token...</p>\n  ) : token?.status === \"FAILED\" ? (\n    <p className=\"error\">{token.error}</p>\n  ) : (\n    // TODO: Redirect to URL that contains original query state\n    <Redirect\n      to={{\n        pathname: config.paths.feed,\n        search: state as string\n      }}\n    />\n  );\n};\n\ninterface StateProps {\n  token: AuthState[\"token\"];\n}\ninterface DispatchProps {\n  dispatchfetchToken: typeof fetchToken.request;\n}\ninterface OwnProps extends RouteComponentProps<{ code: string }> {}\ntype Props = StateProps & DispatchProps & OwnProps;\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(\n  ({ auth }) => ({ token: auth.token }),\n  dispatch =>\n    bindActionCreators({ dispatchfetchToken: fetchToken.request }, dispatch)\n)(Login);\n","import React from \"react\";\nimport { Emoji } from \"emoji-mart\";\nimport moment from \"moment\";\nimport { IssueNode } from \"../../services/Github\";\n\nconst emojis = {\n  CONFUSED: \":confused:\",\n  EYES: \":eyes:\",\n  HEART: \":heart:\",\n  HOORAY: \":tada:\",\n  LAUGH: \":smile:\",\n  ROCKET: \":rocket:\",\n  THUMBS_DOWN: \":-1:\",\n  THUMBS_UP: \":+1:\",\n};\n\nexport default ({\n  title,\n  number,\n  author,\n  createdAt,\n  closedAt,\n  repository,\n  reactions,\n  comments,\n}: Props) => (\n  <li className={`issue ${closedAt ? \"closed\" : \"\"}`}>\n    <h6 className=\"mb-0\">\n      <a\n        href={`https://github.com/${repository?.owner.login}/${repository?.name}/issues/${number}`}\n      >\n        {title}\n      </a>\n    </h6>\n\n    <p>\n      <a\n        href={`https://github.com/${repository?.owner.login}/${repository?.name}/issues/${number}`}\n      >\n        <strong>{repository?.name}</strong>#{number}\n      </a>\n      {\" by \"}\n      {/* Author */}\n      <a href={`https://github.com/${author?.login}`}>\n        <img\n          src={author?.avatarUrl}\n          alt={`${author?.login} profile pic`}\n          className=\"mr-1\"\n          style={{\n            maxHeight: \"1rem\",\n            borderRadius: 2,\n            verticalAlign: \"text-top\",\n          }}\n        />\n        {author?.login}\n      </a>{\" \"}\n      {/* Created */}\n      <span title={createdAt!}>{moment(createdAt!).fromNow()}</span>\n      {/* Closed */}\n      {closedAt && (\n        <em className=\"small\" title={closedAt!}>\n          {\" \"}\n          (closed {moment(closedAt).fromNow()})\n        </em>\n      )}\n      {\" | \"}\n      {/* Reactions */}\n      {reactions.edges?.length ? (\n        Object.entries(\n          reactions?.edges?.reduce(\n            (acc, edge) => ({\n              ...acc,\n              [edge?.node.content || \"\"]:\n                (acc[edge?.node.content || \"\"] || 0) + 1,\n            }),\n            {} as Record<string, number>\n          ) || {}\n        )\n          .slice()\n          .sort(([r1], [r2]) => (r2 > r1 ? -1 : 1))\n          .map(([reaction, count]) => (\n            <span key={reaction}>\n              <Emoji\n                emoji={emojis[reaction as keyof typeof emojis]}\n                size={16}\n                tooltip\n              />\n              {count > 1 && <sup>{count}</sup>}\n            </span>\n          ))\n      ) : (\n        <em className=\"small\">no reactions</em>\n      )}\n      {\" | \"}\n      <span>\n        {comments.totalCount ? (\n          <>\n            <Emoji emoji={\"speech_balloon\"} size={16} tooltip />\n            {comments.totalCount > 1 && (\n              <sup>\n                {comments.totalCount === 100 ? \"100+\" : comments.totalCount}\n              </sup>\n            )}\n          </>\n        ) : (\n          <em className=\"small\">no comments</em>\n        )}\n      </span>\n    </p>\n  </li>\n);\n\ninterface Props extends IssueNode {}\n","import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport * as actions from \"../../store/query/query.actions\";\nimport { RootState } from \"typesafe-actions\";\n\nconst QueryStatus: React.FC<{ results: RootState[\"query\"][\"results\"] }> = ({\n  results,\n}) => (\n  <div className=\"text-monospace small\">\n    {results &&\n      (results.status === \"FETCHING\"\n        ? \"loading...\"\n        : `${results.asOf.toLowerCase()}`)}\n  </div>\n);\n\nconst RefreshCountdown: React.FC<{ seconds: number | null }> = ({\n  seconds,\n}) => (\n  <div className=\"text-monospace small faded\">\n    refreshing in{\" \"}\n    {seconds\n      ? seconds > 45\n        ? moment().add(seconds, \"seconds\").fromNow(true)\n        : `${seconds} seconds`\n      : \"...\"}\n  </div>\n);\n\nconst FilterEntry: React.FC<{\n  title: string;\n  entry: string;\n  ignored: boolean;\n  ignore: (item: string) => void;\n  unignore: (item: string) => void;\n  remove: (item: string) => void;\n}> = (props) => (\n  <>\n    <span\n      className=\"ml-1 close-link pointer\"\n      title={`remove ${props.title}`}\n      onClick={() => props.remove(props.entry)}\n    />\n    <pre\n      className={`ml-1 d-inline pointer ${props.ignored ? \"strikethrough\" : \"\"}`}\n      onClick={() =>\n        props.ignored ? props.unignore(props.entry) : props.ignore(props.entry)\n      }\n    >\n      {props.entry}\n    </pre>\n  </>\n);\n\nconst FilterList: React.FC<{\n  entries: string[];\n  ignored: string[];\n  dispatchRmEntry: (item: string) => void;\n  dispatchIgnoreEntry: (item: string) => void;\n  dispatchUnignoreEntry: (item: string) => void;\n  title: string;\n  fallbackText: React.ReactNode;\n}> = ({\n  entries,\n  dispatchRmEntry,\n  dispatchIgnoreEntry,\n  dispatchUnignoreEntry,\n  title,\n  fallbackText,\n  ignored,\n}) => (\n  <ul className=\"list-unstyled\">\n    {entries.length\n      ? entries\n          .slice()\n          .sort()\n          .map((entry, i) => (\n            <li key={i} className=\"overflow-auto text-nowrap\">\n              <FilterEntry\n                title={title}\n                entry={entry}\n                ignored={ignored.includes(entry)}\n                ignore={dispatchIgnoreEntry.bind(entry)}\n                unignore={dispatchUnignoreEntry.bind(entry)}\n                remove={dispatchRmEntry.bind(entry)}\n              />\n            </li>\n          ))\n      : fallbackText}\n  </ul>\n);\n\nconst FilterForm: React.FC<{\n  dispatchAddEntry: (item: string) => void;\n  placeholder: string;\n}> = ({ dispatchAddEntry, placeholder }) => {\n  const [entry, setEntry] = useState(\"\");\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        dispatchAddEntry(entry);\n        setEntry(\"\");\n      }}\n    >\n      <input\n        type=\"text\"\n        placeholder={placeholder}\n        className=\"small text-monospace w-100 pl-1 mt-2\"\n        value={entry}\n        onChange={(e) => setEntry(e.currentTarget.value)}\n      />\n    </form>\n  );\n};\n\nexport default (props: Props) => {\n  return (\n    <ul className=\"col-sm-3 list-unstyled sidebar\">\n      <li className=\"mt-2 \">\n        <h4>last updated</h4>\n        <QueryStatus results={props.results} />\n        <RefreshCountdown seconds={props.secondsUntilNextPoll} />\n      </li>\n\n      <li>\n        <h4>Repos</h4>\n        <FilterList\n          title=\"repo\"\n          entries={props.repos}\n          ignored={props.ignoredRepos}\n          dispatchRmEntry={props.dispatchRmRepo}\n          dispatchIgnoreEntry={props.dispatchIgnoreRepo}\n          dispatchUnignoreEntry={props.dispatchUnignoreRepo}\n          fallbackText={<p className=\"error\">at least one repo required</p>}\n        />\n        <FilterForm\n          placeholder=\"owner/repo\"\n          dispatchAddEntry={props.dispatchAddRepo}\n        />\n      </li>\n\n      <li>\n        <h4>Authors</h4>\n        <FilterList\n          title=\"author\"\n          entries={props.authors}\n          ignored={props.ignoredAuthors}\n          dispatchRmEntry={props.dispatchRmAuthor}\n          dispatchIgnoreEntry={props.dispatchIgnoreAuthor}\n          dispatchUnignoreEntry={props.dispatchUnignoreAuthor}\n          fallbackText={\n            <div className=\"text-monospace small faded\">all authors</div>\n          }\n        />\n        <FilterForm\n          placeholder=\"username\"\n          dispatchAddEntry={props.dispatchAddAuthor}\n        />\n      </li>\n    </ul>\n  );\n};\n\ninterface Props {\n  repos: RootState[\"query\"][\"query\"][\"repo\"];\n  ignoredRepos: RootState[\"query\"][\"query\"][\"ignoredRepo\"];\n  authors: RootState[\"query\"][\"query\"][\"author\"];\n  ignoredAuthors: RootState[\"query\"][\"query\"][\"ignoredAuthor\"];\n  secondsUntilNextPoll: RootState[\"query\"][\"polling\"][\"count\"];\n  results: RootState[\"query\"][\"results\"];\n  dispatchAddRepo: typeof actions.addRepo;\n  dispatchRmRepo: typeof actions.rmRepo;\n  dispatchIgnoreRepo: typeof actions.ignoreRepo;\n  dispatchUnignoreRepo: typeof actions.unignoreRepo;\n  dispatchAddAuthor: typeof actions.addAuthor;\n  dispatchRmAuthor: typeof actions.rmAuthor;\n  dispatchIgnoreAuthor: typeof actions.ignoreAuthor;\n  dispatchUnignoreAuthor: typeof actions.unignoreAuthor;\n}\n","import React from \"react\";\nimport {\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\nimport { QueryState } from \"../../store/query/query.reducer\";\n\nconst sortOptions = {\n  created: \"recently created\",\n  updated: \"recently updated\",\n  interactions: \"interactions\",\n  \"reactions-heart\": \"loved\",\n  \"reactions-tada\": \"celebrated\",\n  reactions: \"reactions\",\n  \"reactions-+1\": \"liked\",\n  \"reactions--1\": \"disliked\",\n};\n\nexport default ({\n  sort,\n  setSort,\n  searchTerm,\n  setSearchTerm,\n  isFetching,\n  triggerSearch,\n}: Props) => (\n  <nav className=\"navbar px-0\">\n    <ul className=\"d-flex\" style={{ flexGrow: 1 }}>\n      <li className=\"w-100\">\n        <div className=\"input-group input-group-sm \">\n          <input\n            placeholder=\"Search\"\n            value={searchTerm}\n            className={`form-control text-monospace w-100 ${\n              isFetching ? \"loading\" : \"\"\n            }`}\n            onChange={(e: React.FormEvent<HTMLInputElement>) =>\n              setSearchTerm(e.currentTarget.value)\n            }\n          />\n          <div className=\"input-group-append\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              type=\"button\"\n              disabled={isFetching}\n              onClick={() => triggerSearch()}\n            >\n              {isFetching ? (\n                <div className=\"spinner-border spinner-border-sm\" role=\"status\">\n                  <span className=\"sr-only\">Loading...</span>\n                </div>\n              ) : \n                <span className=\"pl-1\">↻</span>\n              }\n            </button>\n          </div>\n        </div>\n      </li>\n    </ul>\n    <ul className=\"ml-auto\">\n      <li className=\"ml-2\">\n        <UncontrolledDropdown className=\"d-inline\">\n          <DropdownToggle tag=\"a\" className=\"link-button d-inline-block\">\n            most {sortOptions[sort as keyof typeof sortOptions]} ▼\n          </DropdownToggle>{\" \"}\n          <DropdownMenu>\n            {Object.entries(sortOptions).map(([key, value]) => (\n              <DropdownItem key={key} onClick={() => setSort(key)}>\n                {value}\n              </DropdownItem>\n            ))}\n          </DropdownMenu>\n        </UncontrolledDropdown>\n      </li>\n    </ul>\n  </nav>\n);\n\ninterface Props {\n  sort: QueryState[\"query\"][\"sort\"];\n  setSort: (sort: string) => void;\n  searchTerm: QueryState[\"query\"][\"search\"];\n  setSearchTerm: (term: string) => void;\n  triggerSearch: () => void;\n  isFetching: boolean;\n}\n","import React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as actions from \"../../store/query/query.actions\";\nimport Issue from \"./Issue\";\nimport Sidebar from \"./Sidebar\";\nimport NavFilter from \"./NavFilter\";\nimport { getQueryString } from \"../../store/query/query.selectors\";\nimport { RootState } from \"typesafe-actions\";\n\nexport const Feed: React.FC<Props> = (props) => (\n  <div className=\"row no-gutters\">\n    <div className=\"col-sm pr-1\">\n      <NavFilter\n        sort={props.query.sort}\n        setSort={props.dispatchSetSort}\n        searchTerm={props.query.search}\n        setSearchTerm={props.dispatchSetSearchTerm}\n        isFetching={props.results?.status === 'FETCHING'}\n        triggerSearch={props.dispatchTriggerSearch}\n      />\n      {props.results?.status === \"FAILED\" ? (\n        <pre>{props.results.error}</pre>\n      ) : (\n        props.results?.data && (\n          <ol className=\"issues\">\n            {props.results.data.search.nodes\n              ?.filter(node => Object.entries(node).length !== 0)\n              .map((node, i) => (\n                <Issue key={i} {...node} />\n              ))}\n          </ol>\n        )\n      )}\n      <code>{getQueryString(props.query)}</code>\n    </div>\n    <Sidebar\n      results={props.results}\n      secondsUntilNextPoll={props.polling.count}\n      repos={props.query.repo}\n      ignoredRepos={props.query.ignoredRepo}\n      dispatchAddRepo={props.dispatchAddRepo}\n      dispatchRmRepo={props.dispatchRmRepo}\n      dispatchIgnoreRepo={props.dispatchIgnoreRepo}\n      dispatchUnignoreRepo={props.dispatchUnignoreRepo}\n      authors={props.query.author}\n      ignoredAuthors={props.query.ignoredAuthor}\n      dispatchAddAuthor={props.dispatchAddAuthor}\n      dispatchRmAuthor={props.dispatchRmAuthor}\n      dispatchIgnoreAuthor={props.dispatchIgnoreAuthor}\n      dispatchUnignoreAuthor={props.dispatchUnignoreAuthor}\n    />\n  </div>\n);\ninterface StateProps {\n  query: RootState[\"query\"][\"query\"];\n  results: RootState[\"query\"][\"results\"];\n  polling: RootState[\"query\"][\"polling\"];\n}\ninterface DispatchProps {\n  dispatchSetSearchTerm: typeof actions.setSearchTerm;\n  dispatchTriggerSearch: typeof actions.executeSearch.request;\n  dispatchSetSort: typeof actions.setSort;\n  dispatchAddRepo: typeof actions.addRepo;\n  dispatchRmRepo: typeof actions.rmRepo;\n  dispatchIgnoreRepo: typeof actions.ignoreRepo;\n  dispatchUnignoreRepo: typeof actions.unignoreRepo;\n  dispatchAddAuthor: typeof actions.addAuthor;\n  dispatchRmAuthor: typeof actions.rmAuthor;\n  dispatchIgnoreAuthor: typeof actions.ignoreAuthor;\n  dispatchUnignoreAuthor: typeof actions.unignoreAuthor;\n}\ninterface OwnProps extends RouteComponentProps {}\ntype Props = StateProps & DispatchProps & OwnProps;\n\nexport default connect<StateProps, DispatchProps, OwnProps, RootState>(\n  ({ query: { query, results, polling } }) => ({\n    query,\n    results,\n    polling\n  }),\n  dispatch =>\n    bindActionCreators(\n      {\n        dispatchSetSearchTerm: actions.setSearchTerm,\n        dispatchTriggerSearch: actions.executeSearch.request,\n        dispatchSetSort: actions.setSort,\n        dispatchAddRepo: actions.addRepo,\n        dispatchRmRepo: actions.rmRepo,\n        dispatchIgnoreRepo: actions.ignoreRepo,\n        dispatchUnignoreRepo: actions.unignoreRepo,\n        dispatchAddAuthor: actions.addAuthor,\n        dispatchRmAuthor: actions.rmAuthor,\n        dispatchIgnoreAuthor: actions.ignoreAuthor,\n        dispatchUnignoreAuthor: actions.unignoreAuthor,\n      },\n      dispatch\n    )\n)(Feed);\n","import React from \"react\";\n\nexport default () => (\n  <div style={{ marginTop: \"0.5rem\" }}>\n    <h4>About</h4>\n    <p className=\"error\">TODO: Center this</p>\n  </div>\n);\ninterface Props {}\n","import React, { useEffect, useState } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { store, history } from \"./store/store\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Nav from \"./components/Nav\";\nimport Login from \"./views/Login\";\nimport Feed from \"./views/Feed\";\nimport About from \"./views/About\";\nimport { persistor } from \"./store/store\";\nimport config from \"./config\";\n\nconst App: React.FC = () => {\n  const [isDark, setDark] = useState(false);\n  useEffect(() => {\n    const isDark = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    setDark(isDark.matches);\n    isDark.addEventListener('change', (event: MediaQueryListEvent) => {\n      setDark(event.matches);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (isDark) {\n      document.body.classList.add('dark')\n    } else {\n      document.body.classList.remove('dark')\n    }\n  }, [isDark])\n  \n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <PersistGate persistor={persistor} loading={<p>Loading...</p>}>\n          <Router basename={config.basePath}>\n            <Nav />\n            <div className=\"container-fluid\">\n              <Switch>\n                <Route path={config.paths.login} component={Login} />\n                <Route path={config.paths.about} component={About} />\n                <Route path={config.paths.feed} component={Feed} />\n              </Switch>\n            </div>\n          </Router>\n        </PersistGate>\n      </ConnectedRouter>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/style.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}